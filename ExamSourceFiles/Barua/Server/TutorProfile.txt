let database = require("../database");
const uploadFile = require("../middleware/uploadImage");
const { validationResult } = require("express-validator");
require("dotenv").config();
const util = require("util");

const executeQuery = util.promisify(database.query).bind(database);

module.exports = {
  getTutorAbouInfoById: async (req, res) => {
    let id = req.params.id;
    let query = `SELECT firstName, lastName, about, age, picPath FROM hm_tutor_profile A, hm_user B WHERE A.userId = B.id AND userId = ?`;

    database.query(query, [id], (err, result) => {
      if (err) console.log(err);
      else res.json(result);
    });
  },

  getTutorOfferedCoursesById: async (req, res) => {
    let id = req.params.id;
    let query = `SELECT subjectName, ratePerHour, description, experienceYears, availableTime, language, level FROM hm_post A inner join hm_tutor_profile B on
    (A.tutorProfileId = B.id and B.userId = ?);`;
    console.log(query);
    database.query(query, [id], (err, result) => {
      if (err) console.log(err);
      else res.json(result);
    });
  },

  getTutorQualificationById: async (req, res) => {
    let id = req.params.id;
    let query = `SELECT A.id, A.subjectName, A.description, A.grade FROM hm_qualification A
     inner join hm_tutor_profile B on (A.tutorProfileId = B.id and B.userId = ?);`;

    database.query(query, [id], (err, result) => {
      if (err) console.log(err);
      else res.json(result);
    });
  },

  getReviewsById: async (req, res) => {
    let id = req.params.id;
    try {
      let result = await executeQuery(
        `SELECT A.id, A.text, A.rating, A.createdDateTime, A.modifiedDateTime, U.firstName, U.lastName, A.userId FROM hm_review A
      inner join hm_user U on (A.userId = U.id)
      inner join hm_tutor_profile T on (A.tutorProfileId = T.id and T.userId = ?);`,
        [id]
      );

      res.status(200).json(result);
    } catch (error) {
      res.status(500).json({ message: error });
    }
  },

  getTutorsByStatus: async (req, res) => {
    let status = req.query.status;

    try {
      let query =
        "SELECT T.*, U.firstName, U.lastName, U.email, U.gender FROM hm_tutor_profile T INNER JOIN hm_user U ON (T.userId = U.id)";
      let queryParams = [];
      if (
        status != undefined &&
        ["100", "101", "102"].some((x) => x == status)
      ) {
        query = query + " WHERE T.status = ?";
        queryParams.push(status);
      } else {
        query = query + ";";
      }

      let result = await executeQuery(query, queryParams);
      res.status(200).json(result);
    } catch (error) {
      res.status(500).json({ message: error });
    }
  },

  saveTutorInfo: async (req, res) => {
    await uploadFile(req, res);

    let { UserId, About, Age } = req.body;

    if (req.file) {
      let PicturePath = "public/images/" + req.file.originalname;

      await executeQuery(
        "UPDATE hm_tutor_profile SET picPath = ?, status = 100 WHERE userId = ?",
        [PicturePath, UserId]
      );
    }

    var queryParams = [];
    var query = "UPDATE hm_tutor_profile SET rating = 0";

    if (About) {
      queryParams.push(About);
      query += ", about = ?";
    }

    if (Age) {
      queryParams.push(Age);
      query += ", age = ?";
    }

    if (queryParams.length > 0) {
      query += ", status = 100 WHERE userId = ?";
      queryParams.push(UserId);
    }

    await executeQuery(query, queryParams);

    res.status(200).json({ message: "Tutor profile updated" });
  },

  updateTutorInfo: async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    let { UserId, Status } = req.body;
    database.query(
      `UPDATE hm_tutor_profile SET status = ? WHERE userId = ?`,
      [Status, UserId],
      (err) => {
        if (err) {
          res.status(500).json({ message: error });
        } else {
          res.json({ message: "Tutor Profile Updated" });
        }
      }
    );
  },
};
